{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude87 Collective Crossing","text":"<p>A multi-agent reinforcement learning environment for simulating collective behavior in tram boarding/exiting scenarios. This project provides a grid-world environment where multiple agents interact to achieve their goals while sharing some resources together.</p>"},{"location":"#overview","title":"\ud83c\udfaf Overview","text":"<p>The <code>CollectiveCrossingEnv</code> simulates a minimal tram boarding scenario where coordination is essential to find the optimal collective behavior:</p> <ul> <li>Boarding agents \ud83d\udeb6\u200d\u2642\ufe0f start in the platform area and navigate to the tram door</li> <li>Exiting agents \ud83d\udeb6\u200d\u2640\ufe0f start inside the tram and navigate to the exit</li> <li>Simple collision avoidance \ud83d\udee1\ufe0f prevents agents from occupying the same space, which makes the passing through the tram door a bottleneck and a challenge</li> <li>Configurable geometry \ud83c\udfd7\ufe0f allows customization of tram size, door position, and environment</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code>from collectivecrossing import CollectiveCrossingEnv\nfrom collectivecrossing.configs import CollectiveCrossingConfig\n\n# Create environment\nconfig = CollectiveCrossingConfig(\n    width=12, height=8, division_y=4,\n    tram_door_x=6, tram_door_width=2, tram_length=10,\n    num_boarding_agents=5, num_exiting_agents=3,\n    max_steps=100, render_mode=\"rgb_array\"\n)\n\nenv = CollectiveCrossingEnv(config=config)\nobservations, infos = env.reset(seed=42)\n</code></pre>"},{"location":"#key-features","title":"\ud83c\udfae Key Features","text":"<ul> <li>Multi-agent simulation with boarding and exiting agents</li> <li>Collision avoidance prevents agents from overlapping</li> <li>Configurable geometry customizable tram and door positions</li> <li>Ray RLlib compatible uses MultiAgentEnv API</li> <li>Multiple rendering modes ASCII and RGB visualization</li> <li>Type-safe configuration using Pydantic v2</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide - Complete setup instructions and troubleshooting</li> <li>Usage Guide - How to use the environment and configuration examples</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Development Guide - Testing, contributing, and development guidelines</li> <li>Features Overview - Comprehensive feature descriptions</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<ul> <li>Local Deployment - Simple deployment guide</li> </ul>"},{"location":"#installation","title":"\ud83d\udee0\ufe0f Installation","text":"<pre><code># Clone and install\ngit clone https://github.com/nima-siboni/collectivecrossing.git\ncd collectivecrossing\nuv sync\n</code></pre> <p>See Installation Guide for detailed instructions.</p>"},{"location":"#quick-deploy","title":"\ud83d\ude80 Quick Deploy","text":"<pre><code># Deploy documentation to GitHub Pages\n./scripts/docs.sh deploy\n</code></pre> <p>See Local Deployment Guide for details.</p>"},{"location":"#testing","title":"\ud83e\uddea Testing","text":"<pre><code># Run tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=collectivecrossing\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests</li> <li>Submit a pull request</li> </ol> <p>See Development Guide for detailed contribution guidelines.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the Apache License 2.0.</p> <p>Happy simulating! \ud83d\ude87\u2728</p>"},{"location":"development/","title":"Development Guide","text":""},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run specific test files\nuv run pytest tests/collectivecrossing/envs/test_collective_crossing.py\n\n# Run with coverage\nuv run pytest --cov=collectivecrossing\n\n# Run with verbose output\nuv run pytest -v\n\n# Run tests in parallel\nuv run pytest -n auto\n</code></pre>"},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 collectivecrossing/\n\u2502   \u2514\u2500\u2500 envs/\n\u2502       \u251c\u2500\u2500 test_collective_crossing.py    # Main environment tests\n\u2502       \u251c\u2500\u2500 test_action_agent_validity.py  # Action validation tests\n\u2502       \u251c\u2500\u2500 test_dummy.py                  # Dummy environment tests\n\u2502       \u251c\u2500\u2500 test_trajectory_vcr.py         # Trajectory tests\n\u2502       \u2514\u2500\u2500 test_truncateds.py             # Truncation tests\n\u2514\u2500\u2500 fixtures/\n    \u2514\u2500\u2500 trajectories/\n        \u2514\u2500\u2500 golden/                        # Golden test data\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<pre><code>import pytest\nfrom collectivecrossing import CollectiveCrossingEnv\nfrom collectivecrossing.configs import CollectiveCrossingConfig\n\ndef test_basic_environment():\n    config = CollectiveCrossingConfig(\n        width=10, height=8, division_y=4,\n        tram_door_x=5, tram_door_width=2, tram_length=8,\n        num_boarding_agents=3, num_exiting_agents=2,\n        max_steps=50\n    )\n\n    env = CollectiveCrossingEnv(config=config)\n    observations, infos = env.reset(seed=42)\n\n    assert len(observations) == 5  # 3 boarding + 2 exiting agents\n    assert not env.terminated\n    assert not env.truncated\n</code></pre>"},{"location":"development/#code-quality-tools","title":"Code Quality Tools","text":"<p>This project uses modern development tools:</p> <ul> <li>\ud83e\udd80 Ruff - Fast Python linter and formatter</li> <li>\ud83d\udd12 Pre-commit - Automated code quality checks</li> <li>\ud83d\udccb Pytest - Testing framework</li> <li>\ud83d\udd0d Coverage - Code coverage reporting</li> <li>\ud83d\udd0d MyPy - Static type checking</li> </ul>"},{"location":"development/#running-code-quality-tools","title":"Running Code Quality Tools","text":"<pre><code># Pre-commit hooks (run automatically on commit)\ngit add .\ngit commit -m \"Your commit message\"\n\n# Manual linting\nuv run ruff check . --config tool-config.toml\n\n# Manual formatting\nuv run ruff format . --config tool-config.toml\n\n# Run pre-commit manually\nuv run pre-commit run --all-files\n\n# Type checking\nuv run mypy src/collectivecrossing/\n</code></pre>"},{"location":"development/#pre-commit-configuration","title":"Pre-commit Configuration","text":"<p>The project uses pre-commit hooks to ensure code quality:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix]\n      - id: ruff-format\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>collectivecrossing/\n\u251c\u2500\u2500 \ud83d\udcc1 src/collectivecrossing/\n\u2502   \u251c\u2500\u2500 \ud83c\udfae collectivecrossing.py      # Main environment implementation\n\u2502   \u251c\u2500\u2500 \u2699\ufe0f configs.py                 # Configuration classes with validation\n\u2502   \u251c\u2500\u2500 \ud83c\udfaf actions.py                 # Action definitions and mappings\n\u2502   \u251c\u2500\u2500 \ud83c\udff7\ufe0f types.py                   # Type definitions (AgentType, etc.)\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 utils/\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcd0 geometry.py            # Geometry utilities (TramBoundaries)\n\u2502   \u2502   \u2514\u2500\u2500 \ud83d\udd27 pydantic.py            # Pydantic configuration utilities\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 wrappers/\n\u2502   \u2502   \u251c\u2500\u2500 \ud83c\udf81 clip_reward.py         # Reward clipping wrapper\n\u2502   \u2502   \u251c\u2500\u2500 \ud83c\udfb2 discrete_actions.py    # Discrete action space wrapper\n\u2502   \u2502   \u251c\u2500\u2500 \u2696\ufe0f reacher_weighted_reward.py  # Weighted reward wrapper\n\u2502   \u2502   \u2514\u2500\u2500 \ud83d\udccd relative_position.py   # Relative positioning wrapper\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 tests/                     # Environment-specific tests\n\u251c\u2500\u2500 \ud83d\udcc1 tests/                         # Main test suite\n\u251c\u2500\u2500 \ud83d\udcc1 examples/                      # Usage examples\n\u251c\u2500\u2500 \u2699\ufe0f pyproject.toml                 # Project configuration\n\u251c\u2500\u2500 \ud83d\udd27 tool-config.toml               # Development tools configuration\n\u2514\u2500\u2500 \ud83d\udccb uv.lock                        # Dependency lock file\n</code></pre>"},{"location":"development/#adding-dependencies","title":"Adding Dependencies","text":"<pre><code># Add main dependency\nuv add package-name\n\n# Add development dependency\nuv add --dev package-name\n\n# Add dependency with specific version\nuv add \"package-name&gt;=1.0.0,&lt;2.0.0\"\n\n# Remove dependency\nuv remove package-name\n</code></pre>"},{"location":"development/#building-and-publishing","title":"Building and Publishing","text":"<pre><code># Build the package\nuv run build\n\n# Check the built package\nuv run twine check dist/*\n\n# Upload to PyPI (if you have access)\nuv run twine upload dist/*\n</code></pre>"},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"development/#development-workflow","title":"Development Workflow","text":"<ol> <li>Fork the repository \ud83c\udf74</li> <li>Create a feature branch \ud83c\udf3f    <code>bash    git checkout -b feature/your-feature-name</code></li> <li>Make your changes \u270f\ufe0f</li> <li>Run tests \ud83e\uddea    <code>bash    uv run pytest    uv run ruff check . --config tool-config.toml</code></li> <li>Commit your changes \ud83d\udcbe    <code>bash    git add .    git commit -m \"Add your feature description\"</code></li> <li>Push to your fork \ud83d\udce4    <code>bash    git push origin feature/your-feature-name</code></li> <li>Submit a pull request \ud83d\udd04</li> </ol>"},{"location":"development/#code-style-guidelines","title":"Code Style Guidelines","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all function parameters and return values</li> <li>Write docstrings for all public functions and classes</li> <li>Keep functions small and focused</li> <li>Use meaningful variable and function names</li> </ul>"},{"location":"development/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commit messages:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Examples: - <code>feat(env): add new rendering mode</code> - <code>fix(config): validate tram door position</code> - <code>docs(readme): update installation instructions</code> - <code>test(env): add collision detection tests</code></p>"},{"location":"development/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Include a clear description of the changes</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> <li>Ensure all tests pass</li> <li>Follow the existing code style</li> </ul>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#common-issues","title":"Common Issues","text":"<ol> <li>Import errors: Make sure you're in the correct Python environment</li> <li>Configuration errors: Check parameter validation messages</li> <li>Test failures: Run tests with <code>-v</code> flag for verbose output</li> </ol>"},{"location":"development/#debug-tools","title":"Debug Tools","text":"<pre><code># Run with debug logging\nuv run python -m pytest --log-cli-level=DEBUG\n\n# Use pdb for debugging\nuv run python -m pdb -m pytest test_file.py::test_function\n\n# Profile code performance\nuv run python -m cProfile -o profile.stats your_script.py\n</code></pre>"},{"location":"development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/#profiling","title":"Profiling","text":"<pre><code>import cProfile\nimport pstats\n\n# Profile your code\nprofiler = cProfile.Profile()\nprofiler.enable()\n\n# Your code here\nenv = CollectiveCrossingEnv(config)\nfor _ in range(1000):\n    env.step(actions)\n\nprofiler.disable()\nstats = pstats.Stats(profiler)\nstats.sort_stats('cumulative')\nstats.print_stats(10)\n</code></pre>"},{"location":"development/#memory-usage","title":"Memory Usage","text":"<pre><code>import tracemalloc\n\ntracemalloc.start()\n# Your code here\ncurrent, peak = tracemalloc.get_traced_memory()\nprint(f\"Current memory usage: {current / 1024 / 1024:.1f} MB\")\nprint(f\"Peak memory usage: {peak / 1024 / 1024:.1f} MB\")\ntracemalloc.stop()\n</code></pre>"},{"location":"features/","title":"Features Overview","text":""},{"location":"features/#environment-features","title":"\ud83d\ude87 Environment Features","text":""},{"location":"features/#multi-agent-simulation","title":"Multi-Agent Simulation","text":"<ul> <li>Boarding agents \ud83d\udeb6\u200d\u2642\ufe0f start in the platform area and navigate to the tram door</li> <li>Exiting agents \ud83d\udeb6\u200d\u2640\ufe0f start inside the tram and navigate to the exit</li> <li>Dynamic agent management with configurable agent counts</li> <li>Individual agent tracking with unique identifiers</li> </ul>"},{"location":"features/#smart-collision-avoidance","title":"Smart Collision Avoidance","text":"<ul> <li>\ud83d\udee1\ufe0f Collision prevention prevents agents from occupying the same space</li> <li>Intelligent pathfinding agents navigate around obstacles</li> <li>Collision detection with appropriate penalties and rewards</li> <li>Spatial awareness agents respect each other's movement</li> </ul>"},{"location":"features/#configurable-geometry","title":"Configurable Geometry","text":"<ul> <li>\ud83c\udfd7\ufe0f Customizable tram size adjustable width, length, and position</li> <li>Flexible door positioning configurable door location and width</li> <li>Environment scaling variable grid dimensions</li> <li>Division line customization tram/waiting area boundary</li> </ul>"},{"location":"features/#ray-rllib-compatibility","title":"Ray RLlib Compatibility","text":"<ul> <li>\ud83d\ude80 MultiAgentEnv API full compatibility with Ray RLlib</li> <li>Standard gym interface follows OpenAI Gym conventions</li> <li>Action space support discrete action spaces for all agents</li> <li>Observation space structured observations for each agent</li> </ul>"},{"location":"features/#multiple-rendering-modes","title":"Multiple Rendering Modes","text":"<ul> <li>\ud83c\udfa8 RGB visualization colorful grid-based rendering</li> <li>ASCII rendering text-based visualization for terminals</li> <li>Customizable colors different colors for different agent types</li> <li>Real-time updates live visualization during simulation</li> </ul>"},{"location":"features/#configuration-features","title":"\u2699\ufe0f Configuration Features","text":""},{"location":"features/#type-safe-configuration","title":"Type-Safe Configuration","text":"<ul> <li>\ud83d\udd12 Pydantic v2 integration using modern Python validation</li> <li>Automatic type checking compile-time error detection</li> <li>Immutable configurations frozen after creation</li> <li>IDE support full autocomplete and type hints</li> </ul>"},{"location":"features/#comprehensive-validation","title":"Comprehensive Validation","text":"<ul> <li>Tram parameter validation ensures logical tram dimensions</li> <li>Boundary checking validates all coordinates within grid</li> <li>Agent count limits reasonable limits for performance</li> <li>Render mode validation ensures valid rendering options</li> </ul>"},{"location":"features/#clear-error-messages","title":"Clear Error Messages","text":"<ul> <li>\ud83d\udcac Descriptive validation failures helpful error messages</li> <li>Context-aware errors specific to the validation failure</li> <li>Debugging support detailed error information</li> <li>User-friendly messages easy to understand and fix</li> </ul>"},{"location":"features/#flexible-configuration","title":"Flexible Configuration","text":"<ul> <li>Default values sensible defaults for common use cases</li> <li>Optional parameters only specify what you need</li> <li>Configuration inheritance extend existing configurations</li> <li>Environment-specific configs different configs for different scenarios</li> </ul>"},{"location":"features/#architecture-features","title":"\ud83c\udfd7\ufe0f Architecture Features","text":""},{"location":"features/#modular-design","title":"Modular Design","text":"<ul> <li>\ud83e\udde9 Separated concerns distinct modules for different functionality</li> <li>Clean interfaces well-defined public APIs</li> <li>Loose coupling minimal dependencies between modules</li> <li>Extensible design easy to add new features</li> </ul>"},{"location":"features/#private-encapsulation","title":"Private Encapsulation","text":"<ul> <li>\ud83d\udd10 Proper encapsulation private members where appropriate</li> <li>Public properties clean external interfaces</li> <li>Internal state management controlled access to internal data</li> <li>API stability stable public interfaces</li> </ul>"},{"location":"features/#environment-wrappers","title":"Environment Wrappers","text":"<ul> <li>\ud83c\udf81 Extensible wrapper system modify environment behavior</li> <li>Reward modification clip, scale, or transform rewards</li> <li>Action space transformation convert between action spaces</li> <li>Observation preprocessing modify observations before use</li> </ul>"},{"location":"features/#performance-optimized","title":"Performance Optimized","text":"<ul> <li>Fast execution optimized for training speed</li> <li>Memory efficient minimal memory footprint</li> <li>Vectorized operations where possible</li> <li>Caching strategies avoid redundant computations</li> </ul>"},{"location":"features/#key-capabilities","title":"\ud83c\udfaf Key Capabilities","text":""},{"location":"features/#training-support","title":"Training Support","text":"<ul> <li>Episode management proper episode termination</li> <li>Step counting track episode progress</li> <li>Truncation handling handle episode timeouts</li> <li>Seed management reproducible environments</li> </ul>"},{"location":"features/#observation-system","title":"Observation System","text":"<ul> <li>Agent positions current location of all agents</li> <li>Goal information target destinations</li> <li>Environment state current grid state</li> <li>Collision data collision detection information</li> </ul>"},{"location":"features/#reward-system","title":"Reward System","text":"<ul> <li>Distance-based rewards rewards for moving toward goals</li> <li>Goal completion large rewards for reaching destinations</li> <li>Collision penalties negative rewards for collisions</li> <li>Time penalties encourage efficient navigation</li> </ul>"},{"location":"features/#action-system","title":"Action System","text":"<ul> <li>Discrete actions 5 basic movement actions</li> <li>Action validation ensure valid actions</li> <li>Multi-agent actions handle actions for all agents</li> <li>Action space queries get action space information</li> </ul>"},{"location":"features/#development-features","title":"\ud83d\udd27 Development Features","text":""},{"location":"features/#testing-infrastructure","title":"Testing Infrastructure","text":"<ul> <li>Comprehensive test suite high test coverage</li> <li>Golden test data regression testing</li> <li>Trajectory testing validate environment behavior</li> <li>Performance benchmarks track performance over time</li> </ul>"},{"location":"features/#code-quality","title":"Code Quality","text":"<ul> <li>Automated linting consistent code style</li> <li>Type checking catch errors early</li> <li>Pre-commit hooks quality gates</li> <li>Documentation comprehensive docstrings</li> </ul>"},{"location":"features/#development-tools","title":"Development Tools","text":"<ul> <li>Modern toolchain latest Python development tools</li> <li>Fast feedback quick test and lint cycles</li> <li>Debugging support easy debugging and profiling</li> <li>IDE integration excellent IDE support</li> </ul>"},{"location":"features/#performance-characteristics","title":"\ud83d\udcca Performance Characteristics","text":""},{"location":"features/#scalability","title":"Scalability","text":"<ul> <li>Agent scaling handle varying numbers of agents</li> <li>Grid scaling support different grid sizes</li> <li>Memory scaling efficient memory usage</li> <li>Speed scaling maintain performance with scale</li> </ul>"},{"location":"features/#reliability","title":"Reliability","text":"<ul> <li>Deterministic behavior reproducible results</li> <li>Error handling graceful error recovery</li> <li>Edge case handling robust to unusual inputs</li> <li>Stability long-running stability</li> </ul>"},{"location":"features/#compatibility","title":"Compatibility","text":"<ul> <li>Python versions support for Python 3.10+</li> <li>Platform support cross-platform compatibility</li> <li>Dependency management modern dependency handling</li> <li>API compatibility stable public APIs</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+ \ud83d\udc0d</li> <li>uv package manager \u26a1</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone &lt;repository-url&gt;\ncd collectivecrossing\n</code></pre>"},{"location":"installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install main dependencies\nuv sync\n\n# Install development dependencies\nuv sync --dev\n</code></pre>"},{"location":"installation/#3-set-up-development-environment","title":"3. Set Up Development Environment","text":"<pre><code># Set up pre-commit hooks\nuv run pre-commit install\n</code></pre>"},{"location":"installation/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Run tests to verify everything works\nuv run pytest\n\n# Check code quality\nuv run ruff check . --config tool-config.toml\n</code></pre>"},{"location":"installation/#alternative-installation-methods","title":"Alternative Installation Methods","text":""},{"location":"installation/#using-pip-not-recommended","title":"Using pip (not recommended)","text":"<pre><code>pip install -e .\n</code></pre>"},{"location":"installation/#using-conda","title":"Using conda","text":"<pre><code>conda create -n collectivecrossing python=3.10\nconda activate collectivecrossing\nuv sync\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li>uv not found: Install uv from https://docs.astral.sh/uv/</li> <li>Python version: Ensure you have Python 3.10 or higher</li> <li>Permission errors: Use <code>uv sync --user</code> or check your Python environment</li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during installation, please: 1. Check the GitHub Issues 2. Create a new issue with your error details 3. Include your Python version and operating system</p>"},{"location":"setup_local_deployment/","title":"Local Deployment Setup","text":"<p>This guide shows you how to deploy your documentation locally without using GitHub Actions.</p>"},{"location":"setup_local_deployment/#quick-setup","title":"\ud83d\ude80 Quick Setup","text":""},{"location":"setup_local_deployment/#1-build-and-deploy-in-one-command","title":"1. Build and Deploy in One Command","text":"<pre><code># Deploy directly to GitHub Pages\n./scripts/docs.sh deploy\n</code></pre> <p>This command will: - Build your documentation - Deploy it to the <code>gh-pages</code> branch - Make it available at <code>https://nima-siboni.github.io/collectivecrossing/</code></p>"},{"location":"setup_local_deployment/#2-manual-steps-if-needed","title":"2. Manual Steps (if needed)","text":"<p>If you prefer to do it step by step:</p> <pre><code># Build the documentation\nuv run mkdocs build\n\n# Deploy to GitHub Pages\nuv run mkdocs gh-deploy\n</code></pre>"},{"location":"setup_local_deployment/#local-development","title":"\ud83d\udee0\ufe0f Local Development","text":""},{"location":"setup_local_deployment/#using-the-documentation-script","title":"Using the Documentation Script","text":"<pre><code># Start local development server\n./scripts/docs.sh serve\n\n# Build documentation\n./scripts/docs.sh build\n\n# Clean build directory\n./scripts/docs.sh clean\n\n# Deploy to GitHub Pages\n./scripts/docs.sh deploy\n</code></pre>"},{"location":"setup_local_deployment/#manual-commands","title":"Manual Commands","text":"<pre><code># Start local server\nuv run mkdocs serve\n\n# Build documentation\nuv run mkdocs build\n\n# Deploy to GitHub Pages\nuv run mkdocs gh-deploy\n</code></pre>"},{"location":"setup_local_deployment/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>collectivecrossing/\n\u251c\u2500\u2500 docs/                          # Documentation source files\n\u2502   \u251c\u2500\u2500 index.md                   # Home page\n\u2502   \u251c\u2500\u2500 installation.md            # Installation guide\n\u2502   \u251c\u2500\u2500 usage.md                   # Usage guide\n\u2502   \u251c\u2500\u2500 development.md             # Development guide\n\u2502   \u251c\u2500\u2500 features.md                # Features overview\n\u2502   \u251c\u2500\u2500 setup_local_deployment.md  # This guide\n\u2502   \u2514\u2500\u2500 assets/                    # Images and other assets\n\u251c\u2500\u2500 mkdocs.yml                     # MkDocs configuration\n\u2514\u2500\u2500 scripts/docs.sh               # Documentation management script\n</code></pre>"},{"location":"setup_local_deployment/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"setup_local_deployment/#mkdocs-configuration-mkdocsyml","title":"MkDocs Configuration (<code>mkdocs.yml</code>)","text":"<p>The configuration uses minimal settings with Material theme defaults:</p> <ul> <li>Material theme with default styling</li> <li>Navigation structure for organized content</li> <li>Search functionality for finding content</li> <li>Responsive design for mobile devices</li> <li>Clean and simple appearance</li> </ul>"},{"location":"setup_local_deployment/#how-it-works","title":"\ud83d\udd27 How It Works","text":"<ol> <li><code>mkdocs build</code> - Creates HTML files in the <code>site/</code> directory</li> <li><code>mkdocs gh-deploy</code> - Pushes the built files to the <code>gh-pages</code> branch</li> <li>GitHub Pages - Serves the files from the <code>gh-pages</code> branch</li> </ol>"},{"location":"setup_local_deployment/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"setup_local_deployment/#common-issues","title":"Common Issues","text":"<ol> <li>Permission errors</li> <li>Make sure you have write access to the repository</li> <li> <p>Check that your Git credentials are set up correctly</p> </li> <li> <p>Build errors</p> </li> <li>Check that all dependencies are installed: <code>uv sync --dev</code></li> <li> <p>Verify your <code>mkdocs.yml</code> configuration</p> </li> <li> <p>Deployment fails</p> </li> <li>Ensure you're on the <code>main</code> branch</li> <li>Check that you have the latest changes committed</li> </ol>"},{"location":"setup_local_deployment/#getting-help","title":"Getting Help","text":"<ul> <li>Check the MkDocs documentation</li> <li>Review the Material theme documentation</li> <li>Run <code>./scripts/docs.sh help</code> for command options</li> </ul>"},{"location":"setup_local_deployment/#workflow","title":"\ud83d\udcdd Workflow","text":""},{"location":"setup_local_deployment/#typical-development-workflow","title":"Typical Development Workflow","text":"<ol> <li>Make changes to your documentation files</li> <li>Test locally with <code>./scripts/docs.sh serve</code></li> <li>Build and deploy with <code>./scripts/docs.sh deploy</code></li> <li>Your docs are live at the GitHub Pages URL</li> </ol>"},{"location":"setup_local_deployment/#advantages-of-local-deployment","title":"Advantages of Local Deployment","text":"<ul> <li>\u2705 Simple and direct - No complex CI/CD setup</li> <li>\u2705 Fast deployment - Deploy when you want</li> <li>\u2705 Full control - You control when and what gets deployed</li> <li>\u2705 No environment issues - Works on your local machine</li> <li>\u2705 Easy debugging - Test everything locally first</li> </ul>"},{"location":"setup_local_deployment/#success","title":"\ud83c\udf89 Success!","text":"<p>Once deployed, your documentation will be:</p> <ul> <li>\u2705 Available at <code>https://nima-siboni.github.io/collectivecrossing/</code></li> <li>\u2705 Searchable and well-organized</li> <li>\u2705 Mobile-responsive</li> <li>\u2705 Easy to maintain and update</li> </ul> <p>Happy documenting! \ud83d\udcda\u2728</p>"},{"location":"trajectory_testing/","title":"\ud83c\udfac Trajectory Testing with VCR","text":"<p>This document explains the VCR-style trajectory testing system used to ensure consistency during refactoring of the CollectiveCrossing environment.</p>"},{"location":"trajectory_testing/#overview","title":"\ud83d\udccb Overview","text":"<p>The trajectory testing system records environment interactions (actions \u2192 observations, rewards, terminations) and replays them to verify that refactored code produces identical behavior. This prevents regressions during code changes.</p>"},{"location":"trajectory_testing/#how-it-works","title":"\u2699\ufe0f How It Works","text":""},{"location":"trajectory_testing/#vcr-video-cassette-recorder-concept","title":"\ud83d\udcfc VCR (Video Cassette Recorder) Concept","text":"<p>The system works like a VCR for environment interactions:</p> <ol> <li>\ud83c\udf99\ufe0f Record Mode: Capture complete environment state at each step</li> <li>\u25b6\ufe0f Replay Mode: Feed the same actions and verify identical outputs</li> <li>\ud83d\udd0d Comparison: Detect any behavioral changes during refactoring</li> </ol>"},{"location":"trajectory_testing/#key-components","title":"\ud83e\udde9 Key Components","text":"<ul> <li>\ud83c\udfaf TrajectoryVCR Class: Main recorder/replayer</li> <li>\ud83c\udfc6 Golden Baselines: Known good trajectories from working code</li> <li>\ud83d\udcca Version-Specific Trajectories: Track changes across versions</li> <li>\ud83d\udcbe JSON Storage: Trajectories stored as structured data files</li> </ul>"},{"location":"trajectory_testing/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>tests/fixtures/trajectories/\n\u251c\u2500\u2500 \ud83c\udfc6 golden/                    # Golden baselines (known good)\n\u2502   \u251c\u2500\u2500 golden_basic_trajectory.json\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 \ud83d\udd04 current/                   # Current version trajectories\n\u2502   \u251c\u2500\u2500 test_basic_trajectory.json\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 \ud83d\udce6 v1.0/                      # Version-specific trajectories\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 \ud83d\udce6 v2.0/\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"trajectory_testing/#version-control","title":"\ud83d\udcdd Version Control","text":""},{"location":"trajectory_testing/#what-to-commit","title":"\u2705 What to Commit","text":"<ul> <li>\ud83c\udfc6 <code>golden/</code> directory: Golden baselines should be committed to version control</li> <li>\ud83d\udccb Test files: All test files should be committed</li> </ul>"},{"location":"trajectory_testing/#what-not-to-commit","title":"\u274c What NOT to Commit","text":"<ul> <li>\ud83d\udd04 <code>current/</code> directory: Current trajectories are temporary test artifacts</li> <li>\ud83d\udce6 Version-specific directories: These are generated during testing</li> </ul> <p>The <code>current/</code> directory is automatically ignored by <code>.gitignore</code>:</p> <pre><code># VCR trajectory test artifacts\ntests/fixtures/trajectories/current/\n</code></pre>"},{"location":"trajectory_testing/#golden-baseline-lifecycle","title":"\ud83d\udd04 Golden Baseline Lifecycle","text":"<ol> <li>\ud83c\udfc6 Create: Golden baselines are created from known-good code</li> <li>\ud83d\udcdd Commit: Golden baselines are committed to version control</li> <li>\ud83e\uddea Test: Tests compare current behavior against golden baselines</li> <li>\ud83d\udd04 Update: Golden baselines are updated when behavior intentionally changes</li> </ol>"},{"location":"trajectory_testing/#usage","title":"\ud83d\ude80 Usage","text":""},{"location":"trajectory_testing/#1-creating-golden-baselines","title":"1. \ud83c\udfc6 Creating Golden Baselines","text":"<p>Golden baselines are trajectories from known good code that serve as reference points.</p> <pre><code># Create golden baseline from working code\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py::test_create_golden_baseline -v\n</code></pre> <p>When to create golden baselines: - \ud83d\udd27 Before starting major refactoring - \ud83d\udc1b After fixing bugs in working code - \u2705 When you have a stable, tested version</p> <p>Important: Tests now preserve existing golden baselines. They will only create new ones if they don't exist, preventing accidental overwrites.</p>"},{"location":"trajectory_testing/#2-comparing-against-golden-baselines","title":"2. \ud83d\udd0d Comparing Against Golden Baselines","text":"<p>Compare current code behavior against golden baselines to detect regressions.</p> <pre><code># Compare current trajectory with golden baseline\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py::test_golden_baseline_comparison -v\n</code></pre> <p>What this catches: - \ud83e\udd16 Changes in agent behavior - \ud83c\udfaf Reward calculation changes - \ud83d\uded1 Termination condition changes - \ud83d\udc41\ufe0f Observation space changes</p> <p>Test Behavior: This test requires the golden baseline to exist and will fail with a clear error message if it's missing.</p>"},{"location":"trajectory_testing/#3-version-specific-testing","title":"3. \ud83d\udcca Version-Specific Testing","text":"<p>Track changes across different versions of your code.</p> <pre><code># Test version-specific trajectories\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py::test_version_specific_trajectories -v\n</code></pre>"},{"location":"trajectory_testing/#4-running-all-tests","title":"4. \ud83e\uddea Running All Tests","text":"<pre><code># Run all trajectory VCR tests\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py -v\n</code></pre>"},{"location":"trajectory_testing/#creating-new-versions","title":"\ud83d\udce6 Creating New Versions","text":""},{"location":"trajectory_testing/#step-1-create-version-specific-vcr","title":"Step 1: \ud83c\udd95 Create Version-Specific VCR","text":"<pre><code>from tests.collectivecrossing.envs.test_trajectory_vcr import TrajectoryVCR\n\n# Create VCR for new version\nvcr_new = TrajectoryVCR(version=\"v2.1\")\n</code></pre>"},{"location":"trajectory_testing/#step-2-record-trajectories","title":"Step 2: \ud83c\udf99\ufe0f Record Trajectories","text":"<pre><code># Record trajectory for new version\ntrajectory = vcr_new.record_trajectory(env, actions_sequence, \"new_feature_test\")\n</code></pre>"},{"location":"trajectory_testing/#step-3-compare-with-previous-version","title":"Step 3: \ud83d\udd04 Compare with Previous Version","text":"<pre><code># Compare with previous version\nvcr_old = TrajectoryVCR(version=\"v2.0\")\nvcr_old._compare_trajectories(old_trajectory, new_trajectory, \"v2.0\", \"v2.1\")\n</code></pre>"},{"location":"trajectory_testing/#creating-golden-baselines","title":"\ud83c\udfc6 Creating Golden Baselines","text":""},{"location":"trajectory_testing/#method-1-using-test-functions","title":"Method 1: \ud83e\uddea Using Test Functions","text":"<pre><code># Run the golden baseline creation test\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py::test_create_golden_baseline -v\n</code></pre>"},{"location":"trajectory_testing/#method-2-manual-creation","title":"Method 2: \u270f\ufe0f Manual Creation","text":"<pre><code>from tests.collectivecrossing.envs.test_trajectory_vcr import TrajectoryVCR, create_test_environment, generate_deterministic_actions\n\n# Create VCR\nvcr = TrajectoryVCR()\n\n# Create environment\nenv = create_test_environment()\nobservations, _ = env.reset(seed=42)\n\n# Generate actions\nactions_sequence = generate_deterministic_actions(observations, num_steps=20)\n\n# Create golden baseline\ntrajectory = vcr.create_golden_baseline(env, actions_sequence, \"my_golden_baseline\")\n</code></pre>"},{"location":"trajectory_testing/#method-3-command-line-script","title":"Method 3: \ud83d\udcbb Command Line Script","text":"<pre><code># Run the manual script\nuv run python tests/collectivecrossing/envs/test_trajectory_vcr.py\n</code></pre>"},{"location":"trajectory_testing/#trajectory-data-structure","title":"\ud83d\udcca Trajectory Data Structure","text":"<p>Each trajectory is stored as a JSON file with the following structure:</p> <pre><code>{\n  \"config\": {\n    \"width\": 10,\n    \"height\": 6,\n    \"division_y\": 3,\n    \"tram_door_x\": 5,\n    \"tram_door_width\": 2,\n    \"tram_length\": 8,\n    \"num_boarding_agents\": 2,\n    \"num_exiting_agents\": 1,\n    \"exiting_destination_area_y\": 0,\n    \"boarding_destination_area_y\": 5\n  },\n  \"initial_observations\": {\n    \"boarding_0\": [2, 1, 5, 3, 4, 5, ...],\n    \"boarding_1\": [7, 2, 5, 3, 4, 5, ...],\n    \"exiting_0\": [4, 4, 5, 3, 4, 5, ...]\n  },\n  \"initial_infos\": {\n    \"boarding_0\": {\"agent_type\": \"boarding\"},\n    \"boarding_1\": {\"agent_type\": \"boarding\"},\n    \"exiting_0\": {\"agent_type\": \"exiting\"}\n  },\n  \"steps\": [\n    {\n      \"step\": 0,\n      \"actions\": {\n        \"boarding_0\": 0,\n        \"boarding_1\": 2,\n        \"exiting_0\": 3\n      },\n      \"observations\": {\n        \"boarding_0\": [2, 1, 5, 3, 4, 5, ...],\n        \"boarding_1\": [7, 2, 5, 3, 4, 5, ...],\n        \"exiting_0\": [4, 4, 5, 3, 4, 5, ...]\n      },\n      \"next_observations\": {\n        \"boarding_0\": [3, 1, 5, 3, 4, 5, ...],\n        \"boarding_1\": [6, 2, 5, 3, 4, 5, ...],\n        \"exiting_0\": [4, 3, 5, 3, 4, 5, ...]\n      },\n      \"next_rewards\": {\n        \"boarding_0\": -0.3,\n        \"boarding_1\": -0.4,\n        \"exiting_0\": 0.1\n      },\n      \"next_terminated\": {\n        \"boarding_0\": false,\n        \"boarding_1\": false,\n        \"exiting_0\": false,\n        \"__all__\": false\n      },\n      \"next_truncated\": {\n        \"boarding_0\": false,\n        \"boarding_1\": false,\n        \"exiting_0\": false,\n        \"__all__\": false\n      },\n      \"next_infos\": {\n        \"boarding_0\": {\"agent_type\": \"boarding\", \"in_tram_area\": false, \"at_door\": false},\n        \"boarding_1\": {\"agent_type\": \"boarding\", \"in_tram_area\": false, \"at_door\": false},\n        \"exiting_0\": {\"agent_type\": \"exiting\", \"in_tram_area\": true, \"at_door\": false}\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"trajectory_testing/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"trajectory_testing/#1-when-to-create-golden-baselines","title":"1. \ud83c\udfc6 When to Create Golden Baselines","text":"<ul> <li>\ud83d\udd27 Before major refactoring: Create baselines from stable code</li> <li>\ud83d\udc1b After bug fixes: Update baselines to reflect correct behavior</li> <li>\ud83d\ude80 Before releases: Ensure baselines represent intended behavior</li> </ul>"},{"location":"trajectory_testing/#2-test-coverage","title":"2. \ud83c\udfaf Test Coverage","text":"<ul> <li>\ud83d\udccb Multiple scenarios: Create baselines for different environment configurations</li> <li>\u26a0\ufe0f Edge cases: Include trajectories that test boundary conditions</li> <li>\ud83d\udee4\ufe0f Common paths: Focus on typical agent behaviors</li> </ul>"},{"location":"trajectory_testing/#3-maintenance","title":"3. \ud83d\udd27 Maintenance","text":"<ul> <li>\ud83d\udd04 Regular updates: Update golden baselines when behavior intentionally changes</li> <li>\ud83d\udcdd Version control: Commit trajectory files to track changes over time</li> <li>\ud83d\udcda Documentation: Document why baselines were updated</li> </ul>"},{"location":"trajectory_testing/#4-debugging","title":"4. \ud83d\udc1b Debugging","text":"<p>When tests fail, the system provides detailed information:</p> <ul> <li>\ud83d\udcca Step-by-step comparison: Shows exactly where trajectories diverge</li> <li>\ud83e\udd16 Agent-specific details: Identifies which agents behave differently</li> <li>\ud83d\udd0d State differences: Shows observation, reward, and termination differences</li> </ul>"},{"location":"trajectory_testing/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"trajectory_testing/#understanding-test-skipping","title":"\ud83e\udd14 Understanding Test Skipping","text":"<p>The VCR testing system is designed to skip tests when required golden baseline files are missing. This is intentional behavior to prevent false failures when baseline data isn't available.</p> <p>Why tests are skipped: - \ud83c\udfc6 Golden baselines missing: Tests require specific golden baseline files to compare against - \ud83d\udd0d No comparison data: Without baselines, tests can't verify consistency - \ud83d\udee1\ufe0f Prevents false failures: Skipping is better than failing due to missing data</p> <p>Common skipped tests: - <code>test_replay_trajectory</code>: Requires <code>test_basic_trajectory.json</code> in golden directory - <code>test_trajectory_consistency</code>: Requires <code>consistency_test.json</code> in golden directory</p> <p>How to identify what's missing:</p> <pre><code># Run tests with verbose output to see skip reasons\nuv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py -v -rs\n\n# Check what golden baselines exist\nls tests/fixtures/trajectories/golden/\n\n# Check what current trajectories exist\nls tests/fixtures/trajectories/current/\n</code></pre>"},{"location":"trajectory_testing/#common-issues","title":"\ud83d\udea8 Common Issues","text":"<ol> <li> <p>\u274c Missing Golden Baseline <code>pytest.skip: Golden baseline test_name not found. Create golden baseline first.</code> \ud83d\udca1 Solution: Run the golden baseline creation test first.</p> </li> <li> <p>\u23ed\ufe0f Tests Being Skipped <code>pytest.skip: Golden cassette test_basic_trajectory not found. Create golden baseline first.    pytest.skip: Golden cassette consistency_test not found. Create golden baseline first.</code> \ud83d\udca1 Solution: These tests require specific golden baseline files. You can resolve this by:</p> </li> </ol> <p>Option A: Create golden baselines automatically <code>bash    # Create all required golden baselines    uv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py::test_create_golden_baseline -v</code></p> <p>Option B: Copy existing current trajectories to golden baselines <code>bash    # Copy specific missing files    cp tests/fixtures/trajectories/current/test_basic_trajectory.json tests/fixtures/trajectories/golden/    cp tests/fixtures/trajectories/current/consistency_test.json tests/fixtures/trajectories/golden/</code></p> <p>Option C: Check what golden baselines exist    ```bash    # List existing golden baselines    ls tests/fixtures/trajectories/golden/</p> <p># List current trajectories that can be copied    ls tests/fixtures/trajectories/current/    ```</p> <ol> <li> <p>\u2699\ufe0f Config Mismatch <code>pytest.fail: Config mismatch between golden and current</code> \ud83d\udca1 Solution: Ensure environment configuration matches between recording and replay.</p> </li> <li> <p>\ud83d\udc41\ufe0f Observation Mismatch <code>pytest.fail: Observation mismatch for agent_id at step N</code> \ud83d\udca1 Solution: Check for changes in environment logic that affect agent behavior.</p> </li> <li> <p>\ud83d\udd04 Golden Baseline Modified <code>git status shows modified golden baseline files</code> \ud83d\udca1 Solution: Tests now preserve golden baselines. If you see modifications, it means:</p> </li> <li>The test detected a regression (intentional behavior)</li> <li>You need to update golden baselines for intentional changes</li> <li>Restore golden baselines with <code>git restore tests/fixtures/trajectories/golden/</code></li> </ol>"},{"location":"trajectory_testing/#debugging-commands","title":"\ud83d\udee0\ufe0f Debugging Commands","text":"<pre><code># \ud83d\udccb List available golden baselines\npython -c \"from tests.collectivecrossing.envs.test_trajectory_vcr import TrajectoryVCR; vcr = TrajectoryVCR(); print('Golden:', vcr.list_golden_baselines())\"\n\n# \ud83d\udccb List current version trajectories\npython -c \"from tests.collectivecrossing.envs.test_trajectory_vcr import TrajectoryVCR; vcr = TrajectoryVCR(); print('Current:', vcr.list_version_trajectories())\"\n\n# \ud83d\udd0d Inspect trajectory file\ncat tests/fixtures/trajectories/golden/golden_basic_trajectory.json | jq '.steps[0]'\n</code></pre>"},{"location":"trajectory_testing/#integration-with-cicd","title":"\ud83d\udd04 Integration with CI/CD","text":"<p>The trajectory testing system integrates with the GitHub Actions workflow:</p> <pre><code># .github/workflows/test.yml\n- name: Run trajectory tests\n  run: |\n    uv run pytest tests/collectivecrossing/envs/test_trajectory_vcr.py -v\n</code></pre> <p>This ensures that: - \u2705 Trajectory consistency is checked on every commit - \ud83d\udea8 Regressions are caught before merging - \ud83d\udcdd Behavioral changes are documented and reviewed</p>"},{"location":"trajectory_testing/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"trajectory_testing/#custom-action-sequences","title":"\ud83c\udfaf Custom Action Sequences","text":"<pre><code>def custom_action_sequence(observations, num_steps):\n    \"\"\"Generate custom deterministic actions\"\"\"\n    actions_sequence = []\n    for step in range(num_steps):\n        actions = {}\n        for agent_id in observations.keys():\n            # Custom logic here\n            actions[agent_id] = custom_policy(observations[agent_id])\n        actions_sequence.append(actions)\n    return actions_sequence\n\n# Use custom actions\ntrajectory = vcr.record_trajectory(env, custom_action_sequence(observations, 20), \"custom_test\")\n</code></pre>"},{"location":"trajectory_testing/#multiple-environment-configurations","title":"\ud83d\udccb Multiple Environment Configurations","text":"<pre><code>def test_multiple_configs():\n    configs = [\n        {\"width\": 10, \"height\": 6, \"num_boarding_agents\": 2},\n        {\"width\": 15, \"height\": 8, \"num_boarding_agents\": 4},\n        {\"width\": 8, \"height\": 4, \"num_boarding_agents\": 1}\n    ]\n\n    for i, config in enumerate(configs):\n        env = create_test_environment_with_config(config)\n        trajectory = vcr.create_golden_baseline(env, actions, f\"config_{i}\")\n</code></pre> <p>This trajectory testing system provides robust regression testing for the CollectiveCrossing environment, ensuring that refactoring doesn't introduce behavioral changes. \ud83c\udf89</p>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#quick-start-example","title":"Quick Start Example","text":"<pre><code>from collectivecrossing import CollectiveCrossingEnv\nfrom collectivecrossing.configs import CollectiveCrossingConfig\n\n# Create configuration\nconfig = CollectiveCrossingConfig(\n    width=12, height=8, division_y=4,\n    tram_door_x=6, tram_door_width=2, tram_length=10,\n    num_boarding_agents=5, num_exiting_agents=3,\n    max_steps=100, render_mode=\"rgb_array\"\n)\n\n# Create environment\nenv = CollectiveCrossingEnv(config=config)\n\n# Reset environment\nobservations, infos = env.reset(seed=42)\n\n# Take actions for all agents\nactions = {\n    \"boarding_0\": 0,  # Move right\n    \"boarding_1\": 1,  # Move up\n    \"boarding_2\": 2,  # Move left\n    \"boarding_3\": 3,  # Move down\n    \"boarding_4\": 4,  # Wait\n    \"exiting_0\": 0,   # Move right\n    \"exiting_1\": 1,   # Move up\n    \"exiting_2\": 2,   # Move left\n}\n\n# Step the environment\nobservations, rewards, terminated, truncated, infos = env.step(actions)\n\n# Render the environment\nrgb_array = env.render()\n</code></pre>"},{"location":"usage/#configuration-system","title":"Configuration System","text":""},{"location":"usage/#configuration-building","title":"Configuration Building","text":"<p>The project uses a type-safe configuration system with automatic validation:</p> <pre><code>from collectivecrossing.configs import CollectiveCrossingConfig\n\n# Create a configuration with automatic validation\nconfig = CollectiveCrossingConfig(\n    width=12,                    # Environment width\n    height=8,                    # Environment height\n    division_y=4,                # Y-coordinate of tram/waiting area division\n    tram_door_x=6,               # X-coordinate of tram door center\n    tram_door_width=2,           # Width of the tram door\n    tram_length=10,              # Length of the tram\n    num_boarding_agents=5,       # Number of agents trying to board\n    num_exiting_agents=3,        # Number of agents trying to exit\n    max_steps=100,               # Maximum steps per episode\n    exiting_destination_area_y=1,    # Y-coordinate for exit destination\n    boarding_destination_area_y=7,   # Y-coordinate for boarding destination\n    render_mode=\"rgb_array\"      # Rendering mode\n)\n</code></pre>"},{"location":"usage/#automatic-validation","title":"Automatic Validation","text":"<p>The configuration system automatically validates: - Tram parameters \ud83d\ude87 (door position, width, length) - Destination areas \ud83c\udfaf (within valid boundaries) - Environment bounds \ud83d\udcd0 (grid dimensions) - Agent counts \ud83d\udc65 (reasonable limits) - Render modes \ud83c\udfa8 (valid options)</p> <pre><code># Invalid configuration will raise descriptive errors\ntry:\n    config = CollectiveCrossingConfig(\n        width=10, tram_length=15  # Error: tram length &gt; width\n    )\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"usage/#visualization","title":"Visualization","text":""},{"location":"usage/#rgb-rendering","title":"RGB Rendering","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Create environment with RGB rendering\nconfig = CollectiveCrossingConfig(\n    width=12, height=8, division_y=4,\n    tram_door_x=6, tram_door_width=2, tram_length=10,\n    num_boarding_agents=5, num_exiting_agents=3,\n    render_mode=\"rgb_array\"\n)\nenv = CollectiveCrossingEnv(config=config)\n\n# Reset and render\nobservations, infos = env.reset(seed=42)\nrgb_array = env.render()\n\n# Display\nplt.figure(figsize=(12, 8))\nplt.imshow(rgb_array)\nplt.axis('off')\nplt.title('Collective Crossing Environment')\nplt.show()\n</code></pre>"},{"location":"usage/#ascii-rendering","title":"ASCII Rendering","text":"<pre><code># Create environment with ASCII rendering\nconfig = CollectiveCrossingConfig(\n    width=12, height=8, division_y=4,\n    tram_door_x=6, tram_door_width=2, tram_length=10,\n    num_boarding_agents=5, num_exiting_agents=3,\n    render_mode=\"ansi\"\n)\nenv = CollectiveCrossingEnv(config=config)\n\n# Reset and render\nobservations, infos = env.reset(seed=42)\nascii_frame = env.render()\n\n# Print ASCII representation\nprint(ascii_frame)\n</code></pre>"},{"location":"usage/#environment-wrappers","title":"Environment Wrappers","text":"<p>The project includes several wrappers for modifying environment behavior:</p>"},{"location":"usage/#reward-clipping","title":"Reward Clipping","text":"<pre><code>from collectivecrossing.wrappers import ClipRewardWrapper\n\nenv = CollectiveCrossingEnv(config=config)\nenv = ClipRewardWrapper(env, min_reward=-1.0, max_reward=1.0)\n</code></pre>"},{"location":"usage/#discrete-actions","title":"Discrete Actions","text":"<pre><code>from collectivecrossing.wrappers import DiscreteActionsWrapper\n\nenv = CollectiveCrossingEnv(config=config)\nenv = DiscreteActionsWrapper(env)\n</code></pre>"},{"location":"usage/#weighted-rewards","title":"Weighted Rewards","text":"<pre><code>from collectivecrossing.wrappers import ReacherWeightedRewardWrapper\n\nenv = CollectiveCrossingEnv(config=config)\nenv = ReacherWeightedRewardWrapper(env, weight=2.0)\n</code></pre>"},{"location":"usage/#relative-positioning","title":"Relative Positioning","text":"<pre><code>from collectivecrossing.wrappers import RelativePositionWrapper\n\nenv = CollectiveCrossingEnv(config=config)\nenv = RelativePositionWrapper(env)\n</code></pre>"},{"location":"usage/#action-space","title":"Action Space","text":"<p>The environment supports the following actions:</p> <ul> <li><code>0</code>: Move right</li> <li><code>1</code>: Move up</li> <li><code>2</code>: Move left</li> <li><code>3</code>: Move down</li> <li><code>4</code>: Wait (no movement)</li> </ul>"},{"location":"usage/#observation-space","title":"Observation Space","text":"<p>Observations include: - Agent positions - Goal positions - Environment state - Collision information</p>"},{"location":"usage/#reward-system","title":"Reward System","text":"<p>Rewards are based on: - Distance to goal - Successful goal completion - Collision penalties - Time penalties</p>"},{"location":"usage/#multi-agent-environment","title":"Multi-Agent Environment","text":"<p>The environment follows the Ray RLlib MultiAgentEnv API:</p> <pre><code># Get action space for all agents\naction_spaces = env.action_spaces\n\n# Get observation space for all agents\nobservation_spaces = env.observation_spaces\n\n# Get agent IDs\nagent_ids = list(env.agents)\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<p>Check the <code>examples/</code> directory for complete usage examples:</p> <pre><code># Run example\nuv run python examples/collectivecrossing_example.py\n</code></pre>"}]}